import os
import asyncio
from fastapi import FastAPI, Request
from dotenv import load_dotenv
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from fastapi.middleware.cors import CORSMiddleware

# âœ… Charger les variables d'environnement
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# âœ… Initialiser FastAPI
app = FastAPI()

# âœ… Activer CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Permet toutes les origines (Ã  restreindre en prod)
    allow_credentials=True,
    allow_methods=["*"],  # Autorise GET, POST, etc.
    allow_headers=["*"],  # Autorise tous les headers
)

# âœ… Initialiser le bot Telegram
bot = Bot(token=TOKEN)
application = Application.builder().token(TOKEN).build()

# âœ… Stockage temporaire des joueurs
users = {}

# âœ… Commande /start
async def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id not in users:
        users[user_id] = {"points": 0, "wallet": 0}
    await update.message.reply_text("Bienvenue sur BlackCoin ðŸŽ‰ !\nUtilise /balance pour voir ton solde.")

# âœ… Commande /balance
async def balance(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id in users:
        await update.message.reply_text(
            f"ðŸ’° Solde: {users[user_id]['points']} pts\nðŸ”¹ Wallet: {users[user_id]['wallet']} pts"
        )
    else:
        await update.message.reply_text("Tu n'es pas encore inscrit. Utilise /start d'abord !")

# âœ… Commande /send_points
async def send_points(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("Usage: /send_points <ID> <montant>")
        return
    try:
        recipient_id = int(args[0])
        amount = int(args[1])
        if user_id in users and users[user_id]["points"] >= amount:
            users[user_id]["points"] -= amount
            users.setdefault(recipient_id, {"points": 0, "wallet": 0})["points"] += amount
            await update.message.reply_text(f"âœ… {amount} pts envoyÃ©s Ã  {recipient_id} !")
        else:
            await update.message.reply_text("âš  Solde insuffisant ou utilisateur inexistant.")
    
    except ValueError:
        await update.message.reply_text("âš  Erreur : Veuillez entrer un ID valide et un montant en nombre.")

# âœ… Ajouter les handlers
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("balance", balance))
application.add_handler(CommandHandler("send_points", send_points))

# âœ… Fonction pour lancer le bot Telegram
async def start_bot():
    """DÃ©marre le bot Telegram"""
    await application.initialize()
    await application.start()
    await application.updater.start_polling()

# âœ… Lancer le bot en parallÃ¨le de FastAPI
@app.on_event("startup")
async def startup_event():
    loop = asyncio.get_event_loop()
    loop.create_task(start_bot())

# âœ… Webhook pour recevoir les mises Ã  jour Telegram
@app.post("/webhook")
async def webhook(request: Request):
    """GÃ¨re les mises Ã  jour de Telegram via Webhook"""
    data = await request.json()
    update = Update.de_json(data, bot)
    await application.process_update(update)
    return {"status": "ok"}

# âœ… API pour rÃ©cupÃ©rer les donnÃ©es des utilisateurs
@app.get("/user-data")
async def get_user_data():
    """Renvoie les donnÃ©es de tous les utilisateurs"""
    return users

# âœ… Page d'accueil
@app.get("/")
async def home():
    return {"message": "Bot connectÃ© Ã  BlackCoin"}
